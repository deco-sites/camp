// DO NOT EDIT. This file is generated by deco.
// This file SHOULD be checked into source version control.
// This file is automatically updated during development when running `dev.ts`.

import config from "./deno.json" assert { type: "json" };
import { DecoManifest } from "$live/types.ts";
import * as $0 from "./routes/[...path].tsx";
import * as $1 from "./routes/_app.tsx";
import * as $2 from "./routes/_middleware.ts";
import * as $3 from "./routes/index.tsx";
import * as $4 from "./routes/login/success/[...redirect].tsx";
import * as $$0 from "./islands/AuthListener.tsx";
import * as $$1 from "./islands/InspectVSCode.tsx";
import * as $$2 from "./islands/test.tsx";
import * as $$3 from "./islands/test2.tsx";
import * as $$$0 from "./sections/GetStarted.tsx";
import * as $$$1 from "./sections/Head.tsx";
import * as $$$2 from "./sections/Unit.tsx";

const manifest: DecoManifest = {
  routes: {
    "./routes/[...path].tsx": $0,
    "./routes/_app.tsx": $1,
    "./routes/_middleware.ts": $2,
    "./routes/index.tsx": $3,
    "./routes/login/success/[...redirect].tsx": $4,
  },
  islands: {
    "./islands/AuthListener.tsx": $$0,
    "./islands/InspectVSCode.tsx": $$1,
    "./islands/test.tsx": $$2,
    "./islands/test2.tsx": $$3,
  },
  sections: {
    "./sections/GetStarted.tsx": $$$0,
    "./sections/Head.tsx": $$$1,
    "./sections/Unit.tsx": $$$2,
  },
  functions: {},
  schemas: {
    "./sections/GetStarted.tsx": {
      "inputSchema": null,
      "outputSchema": null,
    },
    "./sections/Head.tsx": {
      "inputSchema": {
        "title": " Head",
        "type": "object",
        "properties": {
          "title": {
            "type": [
              "string",
              "null",
            ],
            "title": "Title",
          },
          "description": {
            "type": [
              "string",
              "null",
            ],
            "title": "Description",
          },
          "url": {
            "type": [
              "string",
              "null",
            ],
            "title": "Url",
          },
          "imageUrl": {
            "type": [
              "string",
              "null",
            ],
            "title": "Image Url",
          },
          "faviconUrl": {
            "type": [
              "string",
              "null",
            ],
            "title": "Favicon Url",
          },
          "styleUrls": {
            "type": "array",
            "items": {
              "type": "string",
            },
            "title": "Style Urls",
          },
          "themeColor": {
            "type": [
              "string",
              "null",
            ],
            "title": "Theme Color",
          },
        },
        "required": [],
      },
      "outputSchema": null,
    },
    "./sections/Unit.tsx": {
      "inputSchema": {
        "title": " Unit",
        "type": "object",
        "properties": {
          "title": {
            "type": [
              "string",
              "null",
            ],
            "title": "Title",
          },
          "description": {
            "type": [
              "string",
              "null",
            ],
            "title": "Description",
          },
          "videoEmbeddedUrl": {
            "type": [
              "string",
              "null",
            ],
            "title": "Video Embedded Url",
          },
          "youtubeVideo": {
            "type": [
              "string",
              "null",
            ],
            "title": "Youtube Video",
            "default": "Y2DcMhCJSDI",
          },
          "body": {
            "format": "html",
            "type": "string",
            "title": "Body",
          },
          "tests": {
            "title": "Tests",
            "type": "array",
            "items": {
              "title": "Test",
              "type": "object",
              "properties": {
                "question": {
                  "type": "string",
                  "title": "Question",
                },
                "type": {
                  "type": "string",
                  "anyOf": [
                    {
                      "type": "string",
                      "const": "checkbox",
                    },
                    {
                      "type": "string",
                      "const": "radio",
                    },
                  ],
                  "title": "Type",
                },
                "alternatives": {
                  "title": "Alternatives",
                  "type": "array",
                  "items": {
                    "type": "string",
                  },
                },
                "comments": {
                  "title": "Comments",
                  "type": "array",
                  "items": {
                    "type": "string",
                  },
                },
                "correctAnswers": {
                  "title": "Correct Answers",
                  "type": "array",
                  "items": {
                    "type": "number",
                  },
                },
              },
              "required": [
                "question",
                "type",
                "alternatives",
                "correctAnswers",
              ],
            },
          },
        },
        "required": [],
      },
      "outputSchema": null,
    },
  },
  baseUrl: import.meta.url,
  config,
};

// live â€” this exposes the manifest so the live server can render components dynamically
globalThis.manifest = manifest;

export default manifest;
